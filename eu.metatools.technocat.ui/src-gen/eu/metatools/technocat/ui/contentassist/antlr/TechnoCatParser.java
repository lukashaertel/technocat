/*
* generated by Xtext
*/
package eu.metatools.technocat.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import eu.metatools.technocat.services.TechnoCatGrammarAccess;

public class TechnoCatParser extends AbstractContentAssistParser {
	
	@Inject
	private TechnoCatGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected eu.metatools.technocat.ui.contentassist.antlr.internal.InternalTechnoCatParser createParser() {
		eu.metatools.technocat.ui.contentassist.antlr.internal.InternalTechnoCatParser result = new eu.metatools.technocat.ui.contentassist.antlr.internal.InternalTechnoCatParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getModelElementAccess().getAlternatives(), "rule__ModelElement__Alternatives");
					put(grammarAccess.getDefinitionElementAccess().getAlternatives(), "rule__DefinitionElement__Alternatives");
					put(grammarAccess.getInstanceElementAccess().getAlternatives(), "rule__InstanceElement__Alternatives");
					put(grammarAccess.getRTIDAccess().getAlternatives(), "rule__RTID__Alternatives");
					put(grammarAccess.getETIDAccess().getAlternatives(), "rule__ETID__Alternatives");
					put(grammarAccess.getEIDAccess().getAlternatives(), "rule__EID__Alternatives");
					put(grammarAccess.getRSYMAccess().getAlternatives(), "rule__RSYM__Alternatives");
					put(grammarAccess.getTechnologyCatalogAccess().getGroup(), "rule__TechnologyCatalog__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getETDAccess().getGroup(), "rule__ETD__Group__0");
					put(grammarAccess.getETDAccess().getGroup_2(), "rule__ETD__Group_2__0");
					put(grammarAccess.getETDAccess().getGroup_2_2(), "rule__ETD__Group_2_2__0");
					put(grammarAccess.getETDAccess().getGroup_3(), "rule__ETD__Group_3__0");
					put(grammarAccess.getRTDAccess().getGroup(), "rule__RTD__Group__0");
					put(grammarAccess.getRTDAccess().getGroup_2(), "rule__RTD__Group_2__0");
					put(grammarAccess.getRTDAccess().getGroup_2_2(), "rule__RTD__Group_2_2__0");
					put(grammarAccess.getRTDAccess().getGroup_3(), "rule__RTD__Group_3__0");
					put(grammarAccess.getRTDItemAccess().getGroup(), "rule__RTDItem__Group__0");
					put(grammarAccess.getRTDItemAccess().getGroup_3(), "rule__RTDItem__Group_3__0");
					put(grammarAccess.getEDAccess().getGroup(), "rule__ED__Group__0");
					put(grammarAccess.getEDAccess().getGroup_3(), "rule__ED__Group_3__0");
					put(grammarAccess.getEDItemAccess().getGroup(), "rule__EDItem__Group__0");
					put(grammarAccess.getEDItemAccess().getGroup_1(), "rule__EDItem__Group_1__0");
					put(grammarAccess.getRDAccess().getGroup(), "rule__RD__Group__0");
					put(grammarAccess.getRDAccess().getGroup_3(), "rule__RD__Group_3__0");
					put(grammarAccess.getTechnologyCatalogAccess().getNameAssignment_1(), "rule__TechnologyCatalog__NameAssignment_1");
					put(grammarAccess.getTechnologyCatalogAccess().getModelElementsAssignment_2(), "rule__TechnologyCatalog__ModelElementsAssignment_2");
					put(grammarAccess.getImportAccess().getRefAssignment_1(), "rule__Import__RefAssignment_1");
					put(grammarAccess.getETDAccess().getNameAssignment_1(), "rule__ETD__NameAssignment_1");
					put(grammarAccess.getETDAccess().getBasesAssignment_2_1(), "rule__ETD__BasesAssignment_2_1");
					put(grammarAccess.getETDAccess().getBasesAssignment_2_2_1(), "rule__ETD__BasesAssignment_2_2_1");
					put(grammarAccess.getETDAccess().getValueAssignment_3_1(), "rule__ETD__ValueAssignment_3_1");
					put(grammarAccess.getRTDAccess().getNameAssignment_1(), "rule__RTD__NameAssignment_1");
					put(grammarAccess.getRTDAccess().getBasesAssignment_2_1(), "rule__RTD__BasesAssignment_2_1");
					put(grammarAccess.getRTDAccess().getBasesAssignment_2_2_1(), "rule__RTD__BasesAssignment_2_2_1");
					put(grammarAccess.getRTDAccess().getValueAssignment_3_1(), "rule__RTD__ValueAssignment_3_1");
					put(grammarAccess.getRTDAccess().getItemsAssignment_4(), "rule__RTD__ItemsAssignment_4");
					put(grammarAccess.getRTDItemAccess().getDomainAssignment_0(), "rule__RTDItem__DomainAssignment_0");
					put(grammarAccess.getRTDItemAccess().getCodomainAssignment_2(), "rule__RTDItem__CodomainAssignment_2");
					put(grammarAccess.getRTDItemAccess().getValueAssignment_3_1(), "rule__RTDItem__ValueAssignment_3_1");
					put(grammarAccess.getEDAccess().getTypeAssignment_0(), "rule__ED__TypeAssignment_0");
					put(grammarAccess.getEDAccess().getItemsAssignment_2(), "rule__ED__ItemsAssignment_2");
					put(grammarAccess.getEDAccess().getItemsAssignment_3_1(), "rule__ED__ItemsAssignment_3_1");
					put(grammarAccess.getEDItemAccess().getNameAssignment_0(), "rule__EDItem__NameAssignment_0");
					put(grammarAccess.getEDItemAccess().getValueAssignment_1_1(), "rule__EDItem__ValueAssignment_1_1");
					put(grammarAccess.getRDAccess().getLeftAssignment_0(), "rule__RD__LeftAssignment_0");
					put(grammarAccess.getRDAccess().getRelationAssignment_1(), "rule__RD__RelationAssignment_1");
					put(grammarAccess.getRDAccess().getRightAssignment_2(), "rule__RD__RightAssignment_2");
					put(grammarAccess.getRDAccess().getValueAssignment_3_1(), "rule__RD__ValueAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			eu.metatools.technocat.ui.contentassist.antlr.internal.InternalTechnoCatParser typedParser = (eu.metatools.technocat.ui.contentassist.antlr.internal.InternalTechnoCatParser) parser;
			typedParser.entryRuleTechnologyCatalog();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}
	
	public TechnoCatGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TechnoCatGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

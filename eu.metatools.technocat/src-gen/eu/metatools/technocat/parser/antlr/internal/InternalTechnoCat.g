/*
* generated by Xtext
*/
grammar InternalTechnoCat;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.metatools.technocat.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.metatools.technocat.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.metatools.technocat.services.TechnoCatGrammarAccess;

}

@parser::members {

 	private TechnoCatGrammarAccess grammarAccess;
 	
    public InternalTechnoCatParser(TokenStream input, TechnoCatGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TechnologyCatalog";	
   	}
   	
   	@Override
   	protected TechnoCatGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTechnologyCatalog
entryRuleTechnologyCatalog returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTechnologyCatalogRule()); }
	 iv_ruleTechnologyCatalog=ruleTechnologyCatalog 
	 { $current=$iv_ruleTechnologyCatalog.current; } 
	 EOF 
;

// Rule TechnologyCatalog
ruleTechnologyCatalog returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTechnologyCatalogAccess().getModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTechnologyCatalogAccess().getNameTCIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleTCID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTechnologyCatalogRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"TCID");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTechnologyCatalogAccess().getImportsImportParserRuleCall_2_0_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTechnologyCatalogRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTechnologyCatalogAccess().getEntityTypesETDParserRuleCall_2_1_0()); 
	    }
		lv_entityTypes_3_0=ruleETD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTechnologyCatalogRule());
	        }
       		add(
       			$current, 
       			"entityTypes",
        		lv_entityTypes_3_0, 
        		"ETD");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTechnologyCatalogAccess().getRelationTypesRTDParserRuleCall_2_2_0()); 
	    }
		lv_relationTypes_4_0=ruleRTD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTechnologyCatalogRule());
	        }
       		add(
       			$current, 
       			"relationTypes",
        		lv_relationTypes_4_0, 
        		"RTD");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTechnologyCatalogAccess().getEntitiesEDParserRuleCall_2_3_0()); 
	    }
		lv_entities_5_0=ruleED		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTechnologyCatalogRule());
	        }
       		add(
       			$current, 
       			"entities",
        		lv_entities_5_0, 
        		"ED");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTechnologyCatalogAccess().getRelationsRDParserRuleCall_2_4_0()); 
	    }
		lv_relations_6_0=ruleRD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTechnologyCatalogRule());
	        }
       		add(
       			$current, 
       			"relations",
        		lv_relations_6_0, 
        		"RD");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;







// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getRefTechnologyCatalogCrossReference_1_0()); 
	    }
		ruleTCID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModelElement
entryRuleModelElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelElementRule()); }
	 iv_ruleModelElement=ruleModelElement 
	 { $current=$iv_ruleModelElement.current; } 
	 EOF 
;

// Rule ModelElement
ruleModelElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelElementAccess().getDefinitionElementParserRuleCall_0()); 
    }
    this_DefinitionElement_0=ruleDefinitionElement
    { 
        $current = $this_DefinitionElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelElementAccess().getInstanceElementParserRuleCall_1()); 
    }
    this_InstanceElement_1=ruleInstanceElement
    { 
        $current = $this_InstanceElement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDefinitionElement
entryRuleDefinitionElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionElementRule()); }
	 iv_ruleDefinitionElement=ruleDefinitionElement 
	 { $current=$iv_ruleDefinitionElement.current; } 
	 EOF 
;

// Rule DefinitionElement
ruleDefinitionElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDefinitionElementAccess().getETDParserRuleCall_0()); 
    }
    this_ETD_0=ruleETD
    { 
        $current = $this_ETD_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefinitionElementAccess().getRTDParserRuleCall_1()); 
    }
    this_RTD_1=ruleRTD
    { 
        $current = $this_RTD_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInstanceElement
entryRuleInstanceElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceElementRule()); }
	 iv_ruleInstanceElement=ruleInstanceElement 
	 { $current=$iv_ruleInstanceElement.current; } 
	 EOF 
;

// Rule InstanceElement
ruleInstanceElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstanceElementAccess().getEDParserRuleCall_0()); 
    }
    this_ED_0=ruleED
    { 
        $current = $this_ED_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstanceElementAccess().getRDParserRuleCall_1()); 
    }
    this_RD_1=ruleRD
    { 
        $current = $this_RD_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleETD
entryRuleETD returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getETDRule()); }
	 iv_ruleETD=ruleETD 
	 { $current=$iv_ruleETD.current; } 
	 EOF 
;

// Rule ETD
ruleETD returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getETDAccess().getTypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getETDAccess().getNameETIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleETID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getETDRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ETID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getETDAccess().getFromKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getETDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getETDAccess().getBasesETDCrossReference_2_1_0()); 
	    }
		ruleETID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getETDAccess().getCommaKeyword_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getETDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getETDAccess().getBasesETDCrossReference_2_2_1_0()); 
	    }
		ruleETID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getETDAccess().getEqualsSignKeyword_3_0());
    }
(
(
		lv_value_7_0=RULE_STRING
		{
			newLeafNode(lv_value_7_0, grammarAccess.getETDAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getETDRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleRTD
entryRuleRTD returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRTDRule()); }
	 iv_ruleRTD=ruleRTD 
	 { $current=$iv_ruleRTD.current; } 
	 EOF 
;

// Rule RTD
ruleRTD returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='relation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRTDAccess().getRelationKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRTDAccess().getNameRTIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleRTID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRTDRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"RTID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRTDAccess().getFromKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRTDAccess().getBasesRTDCrossReference_2_1_0()); 
	    }
		ruleRTID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRTDAccess().getCommaKeyword_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRTDAccess().getBasesRTDCrossReference_2_2_1_0()); 
	    }
		ruleRTID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRTDAccess().getEqualsSignKeyword_3_0());
    }
(
(
		lv_value_7_0=RULE_STRING
		{
			newLeafNode(lv_value_7_0, grammarAccess.getRTDAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"STRING");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getRTDAccess().getItemsRTDItemParserRuleCall_4_0()); 
	    }
		lv_items_8_0=ruleRTDItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRTDRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_8_0, 
        		"RTDItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleRTDItem
entryRuleRTDItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRTDItemRule()); }
	 iv_ruleRTDItem=ruleRTDItem 
	 { $current=$iv_ruleRTDItem.current; } 
	 EOF 
;

// Rule RTDItem
ruleRTDItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDItemRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRTDItemAccess().getDomainETDCrossReference_0_0()); 
	    }
		ruleETID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRTDItemAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDItemRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRTDItemAccess().getCodomainETDCrossReference_2_0()); 
	    }
		ruleETID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRTDItemAccess().getEqualsSignKeyword_3_0());
    }
(
(
		lv_value_4_0=RULE_STRING
		{
			newLeafNode(lv_value_4_0, grammarAccess.getRTDItemAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleED
entryRuleED returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEDRule()); }
	 iv_ruleED=ruleED 
	 { $current=$iv_ruleED.current; } 
	 EOF 
;

// Rule ED
ruleED returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEDAccess().getTypeETDCrossReference_0_0()); 
	    }
		ruleETID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEDAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEDAccess().getItemsEDItemParserRuleCall_2_0()); 
	    }
		lv_items_2_0=ruleEDItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEDRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"EDItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEDAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEDAccess().getItemsEDItemParserRuleCall_3_1_0()); 
	    }
		lv_items_4_0=ruleEDItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEDRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"EDItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEDItem
entryRuleEDItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEDItemRule()); }
	 iv_ruleEDItem=ruleEDItem 
	 { $current=$iv_ruleEDItem.current; } 
	 EOF 
;

// Rule EDItem
ruleEDItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEDItemAccess().getNameEIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEDItemRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEDItemAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getEDItemAccess().getValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEDItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleRD
entryRuleRD returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRDRule()); }
	 iv_ruleRD=ruleRD 
	 { $current=$iv_ruleRD.current; } 
	 EOF 
;

// Rule RD
ruleRD returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRDAccess().getLeftEDItemCrossReference_0_0()); 
	    }
		ruleEID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRDAccess().getRelationRTDCrossReference_1_0()); 
	    }
		ruleRTID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRDAccess().getRightEDItemCrossReference_2_0()); 
	    }
		ruleEID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRDAccess().getEqualsSignKeyword_3_0());
    }
(
(
		lv_value_4_0=RULE_STRING
		{
			newLeafNode(lv_value_4_0, grammarAccess.getRDAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRDRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleTCID
entryRuleTCID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTCIDRule()); } 
	 iv_ruleTCID=ruleTCID 
	 { $current=$iv_ruleTCID.current.getText(); }  
	 EOF 
;

// Rule TCID
ruleTCID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getTCIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleRTID
entryRuleRTID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRTIDRule()); } 
	 iv_ruleRTID=ruleRTID 
	 { $current=$iv_ruleRTID.current.getText(); }  
	 EOF 
;

// Rule RTID
ruleRTID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getRTIDAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getRTIDAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getRTIDAccess().getRSYMParserRuleCall_2()); 
    }
    this_RSYM_2=ruleRSYM    {
		$current.merge(this_RSYM_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleETID
entryRuleETID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getETIDRule()); } 
	 iv_ruleETID=ruleETID 
	 { $current=$iv_ruleETID.current.getText(); }  
	 EOF 
;

// Rule ETID
ruleETID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getETIDAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getETIDAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEID
entryRuleEID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIDRule()); } 
	 iv_ruleEID=ruleEID 
	 { $current=$iv_ruleEID.current.getText(); }  
	 EOF 
;

// Rule EID
ruleEID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getEIDAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getEIDAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRSYM
entryRuleRSYM returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRSYMRule()); } 
	 iv_ruleRSYM=ruleRSYM 
	 { $current=$iv_ruleRSYM.current.getText(); }  
	 EOF 
;

// Rule RSYM
ruleRSYM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getPlusSignKeyword_1()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getHyphenMinusKeyword_2()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getAsteriskKeyword_3()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getSolidusKeyword_4()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getPercentSignKeyword_5()); 
    }

    |
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getPlusSignPlusSignKeyword_6()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getHyphenMinusHyphenMinusKeyword_7()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getEqualsSignEqualsSignKeyword_8()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getExclamationMarkEqualsSignKeyword_9()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getGreaterThanSignKeyword_10()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getLessThanSignKeyword_11()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getGreaterThanSignEqualsSignKeyword_12()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getLessThanSignEqualsSignKeyword_13()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getExclamationMarkKeyword_14()); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getAmpersandAmpersandKeyword_15()); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getVerticalLineVerticalLineKeyword_16()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getTildeKeyword_17()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getAmpersandKeyword_18()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getVerticalLineKeyword_19()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getCircumflexAccentKeyword_20()); 
    }

    |
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getLessThanSignLessThanSignKeyword_21()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getGreaterThanSignGreaterThanSignKeyword_22()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getPlusSignEqualsSignKeyword_23()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getHyphenMinusEqualsSignKeyword_24()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getAsteriskEqualsSignKeyword_25()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getSolidusEqualsSignKeyword_26()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getPercentSignEqualsSignKeyword_27()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getAmpersandEqualsSignKeyword_28()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getVerticalLineEqualsSignKeyword_29()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getCircumflexAccentEqualsSignKeyword_30()); 
    }

    |
	kw='<<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getLessThanSignLessThanSignEqualsSignKeyword_31()); 
    }

    |
	kw='>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_32()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSYMAccess().getQuestionMarkKeyword_33()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


